#!/bin/bash

PRJSFILE="$HOME/.prjs"
ICONPATH="$HOME/.prjs-icon.png"
PRJSEDITOR="atom"

# Check for zenity
ZENITYSUPPORT=$(command -v zenity)

# Check for icon
if [ ! -f "$ICONPATH" ]; then
	echo -e -n "ABORT - NO ICON INSTALLED\nRUN ./manage.sh --uninstall && ./manage.sh --install\n"
	return
fi

# Update project list
update_project_list() {
	echo -e -n "Making backup..."
	cp "$PRJSFILE" "$PRJSFILE.update.bak"
	if [ -f "$PRJSFILE.update.bak" ]; then
		echo -e -n "OK!\n"
	else
		echo -e -n "FAIL!\n"
	fi
	echo -e -n "\n! - Back up is $PRJSFILE.update.bak - !\n"
	LINENUMB=1
	BKMARKS=$(awk 'NR % 2' "$PRJSFILE")
	while read -r b; do
		CURDIR=$(sed "$((LINENUMB+1))q;d" "$PRJSFILE")
		echo -e -n "Checking directory $CURDIR..."
		if [ -d "$CURDIR" ]; then
			echo -e -n "OK!\n"
		else
			echo -e -n "FAIL!\n"
			echo -e -n "--Deleting..."
			sed -i "$LINENUMB,$((LINENUMB+1))d" "$PRJSFILE"
			echo -e -n "Deleted $b!\n"
		fi
		# echo "Curdir is: $CURDIR"
		# echo "Line is: $b"
		# echo "Line numb is: $LINENUMB"
		LINENUMB=$((LINENUMB+2))
	done <<< "$BKMARKS"
}

# Make sure prjsfile exists
if [ ! -f "$PRJSFILE" ]; then
	echo -e -n "No $PRJSFILE file exists...\nCreate one? "
	read -n1 ans
	echo
	if [ "$ans" == "y" ]; then
		touch "$PRJSFILE"
	else
		echo -e -n "Prjs cannot be used without a .prj file!\n"
	fi
fi

# Run through command opts
if [ "$1" == "--set" ] || [ "$1" == "-s" ]; then
	if [ "$2" != "" ]; then
		if [ "$(cat "$PRJSFILE" | grep -x "$2")" == "" ]; then
			echo -e -n "$2\n$(pwd)/\n" >> "$PRJSFILE"
			echo -e -n "Added $2 at directory $(pwd) to prjsfile\n"
		else
			echo -e -n "Entry $2 already exists!\n"
		fi
	else
		echo -e -n "You must specify a project name!\n"
	fi
elif [ "$1" == "--list" ] || [ "$1" == "-l" ]; then
	echo -e -n "Bookmarks: \n"
	awk 'NR % 2' "$PRJSFILE"
elif [ "$1" == "--delete" ] || [ "$1" == "-d" ]; then
	if [ "$2" != "" ]; then
		if [ "$(cat "$PRJSFILE" | grep -x "$2")" == "" ]; then
			echo -e -n "Project '$2' not found\n"
		else
			PRJNAMELINE=$(grep -xn "$2" "$PRJSFILE" | grep -Eo '^[^:]+')
			PATHLINE=$((PRJNAMELINE+1))
			sed -i.bak "$PRJNAMELINE,${PATHLINE}d" "$PRJSFILE"
			echo -e -n "Deleted project $2\n"
		fi
	else
		echo -e -n "You must specify a project to delete!\n"
	fi
elif [ "$1" == "--restore" ] || [ "$1" == "-r" ]; then
	if [ -f "$PRJSFILE.bak" ]; then
		echo -e -n "Backup file found at $PRJSFILE.bak. Contents: \n"
		cat "$PRJSFILE.bak"
		echo -e -n "\nRestore? "
		read -n1 ans
		echo
		if [ "$ans" == "y" ]; then
			echo -e -n "Restoring...\n"
			cp "$PRJSFILE.bak" "$PRJSFILE"
		else
			echo -e -n "Cancelling...\n"
		fi
	else
		echo -e -n "Could not find $PRJSFILE.bak\n"
	fi
elif [ "$1" == "--zip" ] || [ "$1" == "-z" ]; then
	PRJPATHS=$(awk 'NR % 2 == 0' "$PRJSFILE" | tr '\n' ' ')
	declare -a TOPASS
	TOPASS[0]="$PRJSFILE"
	COUNTER=1
	for p in "$PRJPATHS"; do
		TOPASS[COUNTER]="$p"
		COUNTER=$((COUNTER+1))
	done
	echo -e -n "Running: zip -r out.zip ${PRJPATHS}${PRJSFILE}\n\n"
	zip -r out.zip ${TOPASS[*]}
elif [ "$1" == "--all" ] || [ "$1" == "-a" ]; then
	echo -e -n "\n--Adding all projects--\n"
	for d in *; do
		echo -e -n "Checking $d..."
		if [ -d "$d" ]; then
			echo -e -n "OK!\n"
			PRJSTATUS=$(prjs -l | grep -x "$d")
			if [ "$PRJSTATUS" == "" ]; then
				echo -e -n "Adding project $d..."
				cd "$d"
				prjs -s "$d">/dev/null
				cd ..
				PRJSTATUS=$(prjs -l | grep -x "$d")
				if [ "$PRJSTATUS" == "" ]; then
					echo -e -n "FAIL!\n"
					echo -e -n "--Project $d not found when prjs -l run!\n"
				else
					echo -e -n "OK!\n"
				fi
			fi
		else
			echo -e -n "FAIL!\n"
			echo -e -n "-$d is not a directory\n"
		fi
	done
elif [ "$1" == "--delall" ] || [ "$1" == "-da" ]; then
	for d in *; do
		echo -e -n "Checking $d..."
		if [ -d "$d" ]; then
			if [ "$(prjs -l | grep -x "$d")" != "" ]; then
				echo -e -n "OK!\n"
				echo -e -n "Deleting $d..."
				prjs -d "$d">/dev/null
				if [ "$(prjs -l | grep -x "$d")" == "" ]; then
					echo -e -n "OK!\n"
				else
					echo -e -n "FAIL!\n"
					echo -e -n "-Failed to delete project $d with prjs -d\n"
				fi
			else
				echo -e -n "FAIL!\n"
				echo -e -n "-Project $d not added to prjs\n"
			fi
		else
			echo -e -n "FAIL!\n"
			echo -e -n "-$d is not a folder\n"
		fi
	done
elif [ "$1" == "--update" ] || [ "$1" == "-u" ]; then
	update_project_list
elif [ "$1" == "--git-update" ] || [ "$1" == "-gu" ]; then
	ORIGINALDIR=$(pwd)
	LINENUMB=1
	BKMARKS=$(awk 'NR % 2' "$PRJSFILE")
	UPDATED=""
	while read -r b; do
		CURDIR=$(sed "$((LINENUMB+1))q;d" "$PRJSFILE")
		echo -e -n "Checking directory $CURDIR..."
		if [ -d "$CURDIR" ]; then
			cd "$CURDIR"
			if [ ! -d ".git" ]; then
				echo -e -n "FAIL!\n"
				echo -e -n "-No git repository\n"
			else
				if [ "$(git remote -v | grep origin)" == "" ]; then
					echo -e -n "FAIL!\n"
					echo -e -n "-No origin remote\n"
				else
					echo -e -n "OK!\n"
					UPDATESTATUS=$(git pull origin master | grep Updating)
					if [ "$UPDATESTATUS" != "" ]; then
						UPDATED="$UPDATED\n$b -> $CURDIR"
					fi
				fi
			fi
		else
			echo -e -n "FAIL!\n"
			echo -e -n "-Projects aren't up to date. run --update\n"
			return
			# sed -i "$LINENUMB,$((LINENUMB+1))d" "$PRJSFILE"
		fi
		LINENUMB=$((LINENUMB+2))
	done <<< "$BKMARKS"
	PRJSUPDATED="\n\n--Updated projects--\n$UPDATED"
	echo "$PRJSUPDATED"
	echo
	if [ "$ZENITYSUPPORT" != "" ]; then
		zenity --info --text "$PRJSUPDATED"
	fi
	cd "$ORIGINALDIR"
elif [ "$1" == "--open" ] || [ "$1" == "-o" ]; then
	echo -e -n "Finding project $2..."
	if [ "$(prjs -e $2)" != "" ]; then
		echo -e -n "OK!\n"
		echo -e -n "Opening editor..."
		prjs "$2"
		eval "$PRJSEDITOR ."
		ERRCODE="$?"
		if [ "$ERRCODE" == "0" ]; then
			echo -e -n "OK!\n"
		else
			echo -e -n "FAIL!\n"
			echo -e -n "-Exited with error code $ERRCODE\n"
		fi
	else
		echo -e -n "FAIL!\n"
		echo -e -n "-Could not find project '$2'\n"
	fi
elif [ "$1" == "--exists" ] || [ "$1" == "-e" ]; then
	if [ "$2" == "" ]; then
		echo -e -n ""
	else
		echo -e -n "$(grep -x $2 $PRJSFILE )"
	fi
elif [ "$1" == "--directory" ] || [ "$1" == "-gd" ]; then
	if [ "$(prjs -e $2)" != "" ]; then
		PRJNAMELINE=$(grep -xn "$2" "$PRJSFILE" | grep -Eo '^[^:]+')
		PATHLINE=$((PRJNAMELINE+1))
		PRJPATH=$(sed "${PATHLINE}q;d" "$PRJSFILE")
		echo -e -n "$PRJPATH\n"
	elif [ "$2" == "" ]; then
		echo -e -n "You must specify a project to get the directory of\n"
	else
		echo -e -n "Could not find project $2\n"
	fi
elif [ "$1" == "--get-project" ] || [ "$1" == "-gp" ]; then
	if [ "$2" == "" ]; then
		echo e -n "You must specifiy a github username or url\n"
	elif [ "$3" == "" ]; then
		echo -e -n "Cloning url $2..."
		git clone "$2"
		project_name="${2##*/}"
		folder_name="$(echo -e -n $project_name | cut -f1 -d".")"
		ERRCODE="$?"
		if [ "$ERRCODE" == "0" ]; then
			echo -e -n "OK!\n"
		else
			echo -e -n "FAIL!\n"
			echo -e -n "-fail with error code $ERRCODE\n"
		fi
		echo -e -n "Finding folder $folder_name..."
		if [ -d "$folder_name" ]; then
			echo -e -n "OK!\n"
			cd "$folder_name"
			prjs -s "$folder_name"
		else
			echo -e -n "FAIL!\n"
			echo -e -n "-could not find directory\n"
		fi
	else
		GITHUBURL="git@github.com:$2/$3"
		echo -e -n "Cloning url $GITHUBURL..."
		git clone "$GITHUBURL"
		ERRCODE="$?"
		if [ "$ERRCODE" == "0" ]; then
			echo -e -n "OK!\n"
		else
			echo -e -n "FAIL!\n"
			echo -e -n "-fail with error code $ERRCODE\n"
		fi
		echo -e -n "Finding folder $3..."
		if [ -d "$3" ]; then
			echo -e -n "OK!\n"
			cd "$3"
			prjs -s "$3"
		else
			echo -e -n "FAIL!\n"
			echo -e -n "-fail, could not find folder\n"
		fi
	fi
elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
	echo -e -n "--Basic project manager--\n\n"
	echo -e -n "| --set/-s [project name] : Sets the current directory to input project name\n"
	echo -e -n "| --list/-l : Lists all projects\n"
	echo -e -n "| --delete/-d [project name] : Deletes the input project, storing a backup\n"
	echo -e -n "| --restore/-r : Restores the previous backup file for $PRJSFILE\n"
	echo -e -n "| [project name] : Goes to that projects directory, runs git status and ls\n"
	echo -e -n "| --zip/-z : zip up projects and $PRJSFILE, output to current directory\n"
	echo -e -n "| --update/-u : forces updating of project list to get rid of deleted ones\n"
	echo -e -n "| --all/-a : Adds all folders in current directory, with the project name being the directory name\n"
	echo -e -n "| --delall/-da : deletes all projects in the current working directory\n"
	echo -e -n "| --git-update/-gu : updates all projects with a git repository on origin/master\n"
	echo -e -n "| [no args] : opens graphical mode if zenity support\n"
	echo -e -n "| --open/-o : opens the project in the $PRJSEDITOR editor\n"
	echo -e -n "| --exists/-e : tests existence of project, returns \"\" if nonexistent, [project name] if it exists\n"
	echo -e -n "| --directory/-gd [project name] : gets the directory of the input project, returning \"\" if nonexistend\n"
	echo -e -n "| --get-project/-gp [github username] [project name] || [clone url] : downloads a project from github ssh\n"
	echo -e -n "\n-- creikey --\n"
else
	if [ "$1" == "" ]; then
		echo -e -n "Checking for zenity command..."
		if [ "$ZENITYSUPPORT" != "" ]; then
			echo -e -n "OK!\n"
			LINENUMB=1
			BKMARKS=$(awk 'NR % 2' "$PRJSFILE")
			if [ "$BKMARKS" == "" ]; then
				echo -e -n "No bookmarks made\n"
				return
			fi
			PATHS=$(awk 'NR % 2 == 0' "$PRJSFILE")
      echo "Zenity icon path: ${ICONPATH}"
			TORUN="zenity --window-icon=\"$ICONPATH\" --height=600 --width=700 --list --text \"Select a project\" --column \"Bookmark\" --column \"Path\" "
			echo -e -n "Scanning bookmarks..."
			while read -r b; do
				CURDIR=$(sed "$((LINENUMB+1))q;d" "$PRJSFILE")
				TORUN="$TORUN \"$b\" \"$CURDIR\" "
				LINENUMB=$((LINENUMB+2))
			done <<< "$BKMARKS"
			if [ "$LINENUMB" == "0" ]; then
				echo -e -n "FAIL!\n"
				echo -e -n "-LINENUMB is still 0\n"
			else
				echo -e -n "OK!\n"
			fi
			TORUN="$TORUN Exit"
			TORUN="$TORUN 2>/dev/null"
			TOBKMRK="$(eval $TORUN)"
			if [ "$TOBKMRK" == "Exit" ] || [ "$TOBKMRK" == "" ]; then
				echo -e -n "Exiting..."
				echo -e -n "OK!\n"
				return
			fi
			prjs "$TOBKMRK"
		else
			echo -e -n "FAIL!\n"
		fi
	else
		PRJNAMELINE=$(grep -xn "$1" "$PRJSFILE" | grep -Eo '^[^:]+')
		if [ "$PRJNAMELINE" == "" ]; then
			echo -e -n "Project $1 not found\n"
		else
			PATHLINE=$((PRJNAMELINE+1))
			PRJPATH=$(sed "${PATHLINE}q;d" "$PRJSFILE")
			cd "$PRJPATH"
			echo -e -n "\nYou are now in project '$1'\n"
			echo -e -n "\n------ Contents ------\n"
			ls
			if [ -d ".git" ]; then
				echo -e -n "\n------ Git status ------\n"
				git status
			fi
			echo
		fi
	fi
fi
